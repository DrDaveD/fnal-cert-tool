#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
This script is used to submit multiple certificate requests to InCommon certificate service.
The intended user for the script is the Department Registration Authority Officer (DRAO) with auto-approval enabled.
This script works in two modes:
1) Requesting single host certificate with -H option
2) Request multiple host certificates with hostnames stored in a file -f option

This script retrieves the certificates and output a set of files: hostname.key (private key) and hostname.pem (certificate)
"""

import httplib
import socket
import sys
import os
import time

from ssl import SSLError
from optparse import OptionParser, OptionGroup

from ExceptionDefinitions import *
from utils import *
from rest_client import InCommonApiClient

import logging
logger = logging.getLogger('incommon_cert_request')
logging.basicConfig()

# Set up Option Parser

def parse_args():
    """This function parses all the arguments, validates them and then stores them
    in a dictionary that is used throughout the script."""

    usage = \
        'usage: %prog [options] arg\nUsage: %prog -h/--help [for detailed explanations of options]'
    parser = OptionParser(usage)
    group = OptionGroup(parser, 'Hostname Options',
                        '''Use either of these options.
Specify hostname as a single hostname using -H/--hostname
or specify from a file using -f/--hostfile.''')
    group.add_option(
        '-H',
        '--hostname',
        action='store',
        dest='hostname',
        help='Specify the hostname or service/hostname for which you want to request ' + \
        'the certificate for. If specified, -f/--hostfile will be ignored',
        metavar='HOSTNAME',
        default=None,
        )
    group.add_option(
        '-f',
        '--hostfile',
        action='store',
        dest='hostfile',
        help='Filename with one host (hostname or service/hostname and its optional,' + \
        'alternative hostnames, separated by spaces) per line',
        metavar='HOSTFILE',
        default=None,
        )
    parser.add_option(
        '-d',
        '--directory',
        action='store',
        dest='write_directory',
        help="Write the output files to this directory",
        default='.'
        )
    parser.add_option(
        '-k',
        '--pkey',
        action='store',
        dest='userprivkey',
        help="Specify Requestor's private key (PEM Format). If not specified" + \
             "will take the value of X509_USER_KEY or $HOME/.globus/userkey.pem",
        metavar='PKEY',
        default=None
    )
    parser.add_option(
        '-c',
        '--cert',
        action='store',
        dest='usercert',
        help="Specify requestor's user certificate (PEM Format). If not specified" + \
             "will take the value of X509_USER_CERT or $HOME/.globus/usercert.pem",
        metavar='CERT',
        default=None
    )
    parser.add_option(
        '-a',
        '--altname',
        action='append',
        dest='alt_names',
        help='Specify an alternative hostname for CSR (FQDN). May be used more than ' + \
             'once and if specified, -f/--hostfile will be ignored',
        metavar='HOSTNAME',
        default=[]
    )
    parser.add_option(
        '-u',
        '--username',
        action='store',
        dest='login',
        help='Provide the InCommon username',
        metavar='LOGIN',
        default=[]
    )
    parser.add_option(
        '-p',
        '--password',
        action='store',
        dest='password',
        help='Provide the InCommon password',
        metavar='PASSWORD',
        default=[]
    )
    parser.add_option(
        '-T',
        '--test',
        action='store_true',
        dest='test',
        help='Test connection to InCommon API. Useful to test authentication credentials',
        default=False
    )
    parser.add_option(
        '',
        '--debug',
        dest='debug',
        help="Write debug output to stdout",
        action='store_true',
        default=False
    )
    
    parser.add_option_group(group)
    (args, values) = parser.parse_args()

    if args.debug:
        # this sets the root debug level
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug('Debug mode enabled')

    if not args.test:
        if not args.hostname:
            if args.hostfile is None:
                raise InsufficientArgumentException("InsufficientArgumentException: " + \
                                                    "Please provide hostname(-H) or file name containing hosts(-f)\n")
            else:
                hostfile = args.hostfile
        else:
            hostname = args.hostname
    
    if not args.test:
        if not args.hostname:
            if os.path.exists(hostfile):
                pass
            else:
                raise FileNotFoundException(hostfile, 'Error: could not locate the hostfile')
        
    arguments = dict()
    
    if vars().has_key('args'):
        arguments.update({'args': args})
    if vars().has_key('values'):
        arguments.update({'values': values})
    if vars().has_key('hostname'):
        arguments.update({'hostname': hostname})
    
    arguments.update({'alt_names': args.alt_names})
    arguments.update({'test': args.test})
    arguments.update({'login': args.login})
    arguments.update({'password': args.password})

    if vars().has_key('usercert') and vars().has_key('userkey'):
        usercert, userkey = find_user_cred(args.usercert, args.userprivkey)
        arguments.update({'usercert': usercert})
        arguments.update({'userprivkey': userkey})

    arguments.update({'certdir': args.write_directory})
    
    if vars().has_key('hostfile'):
        arguments.update({'hostfile': hostfile})
    
    return arguments

def buildHeaders(config, certauth=False):
    """"This function build the headers for authentication with password
        or authentication via certificate.

        Returns headers for the HTTP request
    """
    
    headers = {
            'Content-type': config['content_type'], 
            'login': ARGS['login'], 
            'customerUri': config['customeruri'] 
    }

    if not certauth:
        headers['password']  = ARGS['password']

    return headers

def testInCommonConnection(config):
    """This function test the connection to InCommon API. 
       Invokes the listing SSL types function. 
       Successful if response is HTTP 200 OK
    """
    headers = buildHeaders(config)
    response = None
    client = InCommonApiClient(config['apiurl'], 1000)

    try:
        response = client.get_request(config['listingurl'], headers)
        if response.status_code == 200:
            charlimit_textwrap(str(response.status_code) + ": Successful connection to InCommon API")
    except AuthenticationFailureException as exc:
        #InCommon API HTTP Error codes and messages are not consistent with documentation, hiding the error message for this exception 
        charlimit_textwrap('Authentication failure while trying to connect to InCommon API.')
        charlimit_textwrap('Check your user credentials at the InCommon CM: https://cert-manager.com/customer/InCommon')
    except ConnectionFailureException as exc:
        charlimit_textwrap('InCommon API connection error')
        charlimit_textwrap('Connection failure details: %s' % str(exc))
        charlimit_textwrap('Check your configuration parameters or contact InCommon support.')

def submit_request(config, hostname, cert_csr, sans=None, sslcontext=None):
    """This function submits an enrollment request for a certificate
       If successful returns a self-enrollment certificate Id = sslId
    """
    
    #If sslcontext is not None then certauth param for buildHeaders is true
    headers = buildHeaders(config)
    response = None
    response_data = None
    client = InCommonApiClient(config['apiurl'], 1000)

    cert_type = config['igtfservercert']
    
    if sans:
        cert_type = config['igtfmultidomain']
    
    payload = dict(
        csr=cert_csr,
        orgId=config['department'],
        certType=cert_type,
        numberServers=0,
        serverType=config['servertype'],
        term=config['term'],
        comments="Certificate request for " + str(hostname)
    )
   
    if sans:
        payload.update(subjAltNames=sans)
    
    try:
        response = client.post_request(config['enrollurl'], headers, payload)
        
        if response.status_code == 200:
            response_data = response.json()['sslId']
    except (AuthenticationFailureException, ConnectionFailureException) as exc:
        raise
    
    return response_data
    
def retrieve_cert(config, sslId, sslcontext=None):
    """This function retrieves a certificate given a self-enrollment certificate Id = sslId
    """

    #If sslcontext is not None then certauth param for buildHeaders is true
    headers = buildHeaders(config)
    response = None
    client = InCommonApiClient(config['apiurl'], 1000)

    #Testing 20 times and 5 seconds intervals as retry_count, adjust after testing
    retry_count = 20
    retrieve_url = config['retrieveurl'] + str(sslId) + config['certx509co']
    
    for _ in range(retry_count):
        try:
            response = client.get_request(retrieve_url, headers)
            if response.status_code == 200:
                break
        except (AuthenticationFailureException, ConnectionFailureException) as exc:
            pass
        charlimit_textwrap('Waiting for 5 seconds before retrying certificate retrieval')
        time.sleep(5)

    return response.text
           
if __name__ == '__main__':
    try:	
        CONFIG = read_config()
        ARGS = parse_args()
	
        if ARGS['test']:
           testInCommonConnection(CONFIG)
	   sys.exit(0)
        
        #Asking for usercert because we have to use passwords while we get approval for the InCommon end user certs
        #Check usercert should be removed from here and from parse_args, usercert and userkey are mandatory
        if 'usercert' in ARGS:
            ssl_context = get_ssl_context(ARGS['usercert'], ARGS['userprivkey'])
        
        #Create tuple(s) either with a single hostname and altnames or with a set of hostnames and altnames from the hostfile
        if 'hostname' in ARGS:
            hosts = [tuple([ARGS['hostname'].strip()] + ARGS['alt_names'])]
        else:
            with open(ARGS['hostfile'], 'rb') as hosts_file:
                host_lines = hosts_file.readlines()
            hosts = [tuple(line.split()) for line in host_lines if line.strip()]
        
        requests = list()
        certs = list()
        
        charlimit_textwrap('Beginning request process for the following certificate(s):')
        charlimit_textwrap('===========================================================')

        #Building the lists with certificates --> Cert(object) 
        for host in set(hosts):
            common_name = host[0]
            sans = host[1:]
            
            charlimit_textwrap('CN: %s, SANS: %s' % (common_name, sans))
            cert_obj = Cert(common_name, ARGS['certdir'], altnames=sans)
            logger.debug(cert_obj.x509request.as_text())
            certs.append(cert_obj)

        charlimit_textwrap('===========================================================')

        for cert in certs:
            charlimit_textwrap('Requesting certificate for %s' % cert.x509request.get_subject())
            response_request = submit_request(CONFIG, cert.x509request.get_subject(), cert.base64_csr(), sans=cert.altnames)
        
            #response_request stores the sslId for the certificate request
            if response_request:
                requests.append(tuple([response_request, cert]))
        
        charlimit_textwrap('Waiting 30 seconds for certificate approval...')
        time.sleep(30) 
        
        for request in requests:
            cert = request[1]
            subj = str(cert.x509request.get_subject())
            charlimit_textwrap('Retrieving certificate for %s' % subj)
            response_retrieve = retrieve_cert(CONFIG, request[0])

            if response_retrieve is not None:
                cert_path = os.path.join(ARGS['certdir'], subj.split("=")[1] + '-cert.pem')
                print("Writing %s" % cert_path)
                safe_rename(cert_path)
                atomic_write(cert_path, response_retrieve)

                print("Writing %s" % cert.final_keypath)
                cert.write_pkey()
        
        charlimit_textwrap("%s certificates were specified" % len(certs))
        charlimit_textwrap("%s certificates were requested and retrieved successfully" % len(requests))
    
    except SystemExit:
        # We need to specifically catch sys.exit() so that it doesn't hit the catchall Exception below and
        raise
    except SSLError as exc:
        print_exception_message(exc)
        sys.exit('Please check for valid certificate.\n')
    except KeyboardInterrupt as exc:
        print_exception_message(exc)
        sys.exit('''Interrupted by user\n''')
    except KeyError as exc:
        print_exception_message(exc)
        charlimit_textwrap('Key %s not found' % exc)
        sys.exit(1)
    except FileWriteException as exc:
        charlimit_textwrap(str(exc))
        charlimit_textwrap("The script will exit now\n")
        sys.exit(1)
    except FileNotFoundException as exc:
        charlimit_textwrap(str(exc) + ':' + exc.filename)
        sys.exit(1)
    except Exception as exc:
        print_exception_message(exc)
        sys.exit(1)
    sys.exit(0)
